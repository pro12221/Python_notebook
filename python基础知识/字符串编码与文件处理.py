# 文本编辑器读取流程
# 阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）
# 阶段2、文件编辑器会将文件内容从硬盘读入内存
# 阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上

# Python解释器读取文件流程
# 阶段1、启动python解释器，此时就相当于启动了一个文本编辑器
# 阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中
# 阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法

# unicode编码
# 1. 存在所有语言中的所有字符与数字的一一对应关系,即兼容万国字符
# 2. 与传统的字符编码的二进制数都有对应关系，详解如下

# 文件编码解码过程
## 文件的编码全过程 (写入文件)
### 步骤 1：输入与字符集映射
# 输入： 用户在编辑器中输入文本，例如 "你好"。
# 字符集 (Unicode)： 操作系统和编辑器将这些字符映射到它们的唯一码位
### 步骤 2：编码 (Encoding)
# 编码器选择： 操作系统或应用程序（如 Python, Java）根据用户或系统的设置，选择一个字符编码格式（例如：UTF-8）。
### 步骤 3：写入文件 (I/O)
# 存储： 操作系统将这串字节流原封不动地写入到硬盘上的文件中。
# 文件内容： 文件中存储的不再是字符 "你好"，而是一串二进制数据。


# 文件的解码全过程 (读取文件)
### 这个过程是将文件中存储的二进制数据，还原成人类可读的字符，以便在屏幕上显示或被程序处理。
# 步骤 1：文件读取 (I/O)
# 读取： 应用程序（如浏览器、文本编辑器）向操作系统请求读取文件内容。
# 字节流： 操作系统返回文件中存储的原始字节序列给应用程序：E4 BD A0 E5 A5 BD。
# 步骤 2：解码 (Decoding)
# 解码器选择（关键步骤）： 应用程序必须知道文件当初是用什么编码格式存储的（例如，UTF-8）。如果猜错了，就会出现乱码。
# 步骤 3：字符渲染与显示渲染：
# 应用程序将获取到的码位序列（$U+4F60$, $U+597D$）通过字库（字体文件）查询对应的图形表示。



# 文件处理
## 文件处理分为三个步骤
### 打开文件，获得文件对象
f=open(r"文件处理/test.txt", mode="rt", encoding="utf-8") # r表示字符串里的反斜杠\不会被当成转义字符处理

### 读写等操作
f.read()

### 关闭文件
f.close()

### with语法不用再关闭文件
with open(r"文件处理/test.txt", mode="rt", encoding="utf-8") as f:
    print(f.read())


## 文件打开方式
# r:只读模式
# w:只写模式
# a:只追加模式
## 控制文件读写内容的模式
# t: 只能处理文本文件，读写都是已str为单位
# b: 能处理所有文件，读写都是已byte为单位，不能指定encoding参数

### r模式文件不存在则报错，文件存在文件指针会停在文件头
### w模式，文件不存在则创建新文件，文件存在则清空，文件指针在文件开头
### a模式,永远往后面追加


print('-' * 100)
# 文件操作方法
